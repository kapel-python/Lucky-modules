# meta developer: @Lucky_modules

__version__ = (1, 1, 4)

from .. import loader, utils
import time

class AntiSpamModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞ –≤ —á–∞—Ç–∞—Ö"""
    strings = {"name": "AntiSpam"}

    def __init__(self):
        self.cache = {}
        self.chat_settings = {}

    async def client_ready(self, client, db):
        self.db = db
        self.chat_settings = self.db.get("antispam", "chat_settings", {})

    async def antispamchatcmd(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —á–∞—Ç –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞"""
        if message.chat is None:
            await message.edit("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö")
            return
        
        chat_id = str(message.chat.id)
        if chat_id in self.chat_settings:
            del self.chat_settings[chat_id]
            await message.edit("‚úÖ –ß–∞—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –∞–Ω—Ç–∏—Å–ø–∞–º–∞")
        else:
            self.chat_settings[chat_id] = {
                "enabled": False,
                "time_limit": 1.0
            }
            await message.edit("‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–Ω—Ç–∏—Å–ø–∞–º")
        
        self.db.set("antispam", "chat_settings", self.chat_settings)

    async def antispamcmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏—Å–ø–∞–º"""
        if message.chat is None:
            await message.edit("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö")
            return
        
        chat_id = str(message.chat.id)
        if chat_id not in self.chat_settings:
            await message.edit("‚ö†Ô∏è –ß–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π .antispamchat")
            return
        
        self.chat_settings[chat_id]["enabled"] ^= True
        status = "–≤–∫–ª—é—á—ë–Ω" if self.chat_settings[chat_id]["enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω"
        await message.edit(f"‚úÖ –ê–Ω—Ç–∏—Å–ø–∞–º {status}.")
        self.db.set("antispam", "chat_settings", self.chat_settings)

    async def antispamtimecmd(self, message):
        """–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è –∞–Ω—Ç–∏—Å–ø–∞–º–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)"""
        if message.chat is None:
            await message.edit("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö")
            return
        
        chat_id = str(message.chat.id)
        
        if chat_id not in self.chat_settings:
            await message.edit("‚ö†Ô∏è –ß–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π .antispamchat")
            return
        
        args = utils.get_args_raw(message)
        
        if not args:
            current_limit = self.chat_settings[chat_id]["time_limit"]
            await message.edit(
                f"üïí –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –∞–Ω—Ç–∏—Å–ø–∞–º–∞: {current_limit} —Å–µ–∫—É–Ω–¥\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: "
                f".antispamtime <—á–∏—Å–ª–æ>"
            )
            return
        
        try:
            time_limit = float(args)
            if time_limit <= 0:
                raise ValueError
                
            self.chat_settings[chat_id]["time_limit"] = time_limit
            self.db.set("antispam", "chat_settings", self.chat_settings)
            await message.edit(f"‚úÖ –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {time_limit} —Å–µ–∫.")
            
        except (ValueError, TypeError):
            await message.edit("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.7)")

    async def watcher(self, message):
        if not message or not message.sender_id or not message.chat:
            return
        
        chat_id = str(message.chat.id)
        if chat_id not in self.chat_settings or not self.chat_settings[chat_id]["enabled"]:
            return
        
        user_id = message.sender_id
        time_limit = self.chat_settings[chat_id]["time_limit"]
        current_time = time.time()
        last_time = self.cache.get(user_id, 0)
        
        if current_time - last_time < time_limit:
            await message.delete()
            self.cache[user_id] = current_time
            return
        
        self.cache[user_id] = current_time
