# meta developer: @Lucky_modules
# requires: pytz deep_translator geocoder

import pytz
from datetime import datetime
import difflib
import geocoder
from deep_translator import GoogleTranslator
from .. import loader, utils
import asyncio
from concurrent.futures import ThreadPoolExecutor

months_ru = [
    "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
    "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
]
weekdays_ru = [
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", 
    "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
]

def get_utc_offset(tz):
    now = datetime.now(tz)
    offset = now.utcoffset().total_seconds() / 3600
    if offset.is_integer():
        return f"UTC+{int(offset)}" if offset >= 0 else f"UTC{int(offset)}"
    else:
        return f"UTC{offset:+.1f}".replace('+0', '+').replace('-0', '-')

def get_timezone(city):
    try:
        if any(ord(c) > 127 for c in city):
            city_en = GoogleTranslator(source='auto', target='en').translate(city)
        else:
            city_en = city
    except:
        city_en = city
    
    location = geocoder.osm(city)
    if location.ok:
        tz = geocoder.timezone(location.latlng).timezone
        if tz: 
            return tz, location.address
    
    normalized_city = city_en.lower().replace(" ", "_")
    best_match, best_score = None, 0
    for tz in pytz.all_timezones:
        tz_location = tz.split("/")[-1].lower()
        score = difflib.SequenceMatcher(None, normalized_city, tz_location).ratio()
        if score > best_score:
            best_match, best_score = tz, score
    
    return (best_match, best_match) if best_score > 0.5 else (None, None)

def get_time_info(city):
    try:
        timezone, location = get_timezone(city)
        if not timezone:
            return "‚ùå –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        tz = pytz.timezone(timezone)
        now = datetime.now(tz)
        utc_offset = get_utc_offset(tz)
        
        return (
            f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location} ({utc_offset})\n"
            f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%H:%M:%S')}\n"
            f"üìÖ –î–∞—Ç–∞: {now.day} {months_ru[now.month-1]} {now.year}, {weekdays_ru[now.weekday()]}"
        )
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

@loader.tds
class TimeMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""

    strings = {
        "name": "Time",
        "fetching": "‚åõ –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏...",
        "error_city": "üö´ –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ (–ø—Ä–∏–º–µ—Ä: <code>.time –ú–æ—Å–∫–≤–∞</code>). –ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å –Ω–µ–±–æ–ª—å—à–æ–π –æ—à–∏–±–∫–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä <code>.time Mosco</code>",
    }

    async def timecmd(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ –≥–æ—Ä–æ–¥—É. –§–æ—Ä–º–∞—Ç: .time <–≥–æ—Ä–æ–¥>"""
        city = utils.get_args_raw(message)
        if not city:
            await utils.answer(message, self.strings["error_city"])
            return
        
        await utils.answer(message, self.strings["fetching"])
        
        try:
            loop = asyncio.get_event_loop()
            with ThreadPoolExecutor() as pool:
                result = await loop.run_in_executor(pool, get_time_info, city)
            await utils.answer(message, result)
        except Exception as e:
            await utils.answer(message, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
