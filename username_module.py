# meta developer: @Lucky_modules

from .. import loader, utils
import random
import aiohttp
import asyncio
import json

try:
    import nltk
    from nltk.corpus import words
    NLTK_AVAILABLE = True
except ImportError:
    NLTK_AVAILABLE = False

@loader.tds
class UsernameMod(loader.Module):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤"""
    strings = {
        "name": "Username",
        "generating": "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–≤–æ–±–æ–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º...",
        "username_found": "‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º: <b>@{}</b>\n\nüéØ –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        "username_set": "‚úÖ –Æ–∑–µ—Ä–Ω–µ–π–º <b>@{}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
        "username_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —é–∑–µ—Ä–Ω–µ–π–º–∞: {}",
        "take_username": "üì• –ó–∞–±—Ä–∞—Ç—å",
        "next_username": "‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π",
        "show_all": "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
        "choose_amount": "üìã –£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤:",
        "generating_usernames": "üîÑ –°–æ–∑–¥–∞—é {} —é–∑–µ—Ä–Ω–µ–π–º–æ–≤...",
        "available_usernames": "‚úÖ –°–≤–æ–±–æ–¥–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã ({} —à—Ç):\n\n{}",
        "not_enough_usernames": "‚ùå –ù–∞—à–ª–æ—Å—å —Ç–æ–ª—å–∫–æ {} –∏–∑ {} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∏—Ö –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª –ò–ò):\n\n{}",
        "ai_filter_prompt": "ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?\n\n–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º—ã –∏ –æ—Å—Ç–∞–≤–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Ö–æ—Ç—å –∫–∞–∫—É—é —Ç–æ –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤—è–∑–∫—É –ª–∏–±–æ –ª–æ–≥–∏–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä @mega_car\n‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –º–æ–∂–µ—Ç —É–º–µ–Ω—å—à–∏—Ç—å—Å—è\n\n<i>–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –±–∞–ª–∞–Ω—Å —Å–µ—Ä–≤–∏—Å–∞ API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, —Å–ª–µ–¥–∏ –∏ –Ω–µ —Ç—Ä–∞—Ç—å –º–Ω–æ–≥–æ, –≤–µ–¥—å –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è</i>\n\nüí∏ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å API —Å–µ—Ä–≤–∏—Å–∞: {}\nü§ñ –ú–æ–¥–µ–ª—å –ò–ò: {}",
        "use_ai_yes": "‚úÖ –î–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å",
        "use_ai_no": "‚ùå –ù–µ—Ç, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å",
        "filtering_ai": "ü§ñ –§–∏–ª—å—Ç—Ä—É—é —é–∑–µ—Ä–Ω–µ–π–º—ã —Å –ø–æ–º–æ—â—å—é –ò–ò...",
        "ai_footer": "\n\nü§ñ –î–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –ò–ò ({})",
        "ai_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ò–ò: {}\n–í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.",
        "checking_availability": "üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º–∞...",
        "nltk_not_available": "‚ùå NLTK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π <code>.terminal pip install nltk</code>, –∞ –∑–∞—Ç–µ–º <code>.restart -f</code>",
        "downloading_words": "üì• –°–∫–∞—á–∏–≤–∞—é –±–∞–∑—É —Å–ª–æ–≤ NLTK...",
    }

    API_KEY = "shds-wFfXMK5v8V54znYAdmBVQ67JJaY"
    API_CHAT_URL = "https://gptunnel.ru/v1/chat/completions"
    API_BALANCE_URL = "https://gptunnel.ru/v1/balance"
    MODEL = "gpt-4.1-nano"

    def __init__(self):
        self.word_list = []
        self.nltk_ready = False

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        if NLTK_AVAILABLE:
            await self.init_nltk()

    async def init_nltk(self):
        
        try:
            try:
                words.words()
            except:
                nltk.download('words', quiet=True)
            
            self.word_list = [w.lower() for w in words.words() if w.isalpha() and len(w) > 2]
            self.nltk_ready = True
        except Exception as e:
            self.nltk_ready = False

    def generate_username(self):
        if not self.nltk_ready or not self.word_list:
            return None
        
        word1 = random.choice(self.word_list)
        word2 = random.choice(self.word_list)
        return f"{word1}_{word2}"

    async def check_username_availability(self, username):
        try:
            entity = await self.client.get_entity(username)
            return False  # –Æ–∑–µ—Ä–Ω–µ–π–º –∑–∞–Ω—è—Ç
        except Exception:
            return True  # –Æ–∑–µ—Ä–Ω–µ–π–º —Å–≤–æ–±–æ–¥–µ–Ω

    async def find_available_username(self):
        max_attempts = 50
        for _ in range(max_attempts):
            username = self.generate_username()
            if username and await self.check_username_availability(username):
                return username
        return None

    def number_to_emoji(self, n):
        emoji_map = {
            '0': '0Ô∏è‚É£', '1': '1Ô∏è‚É£', '2': '2Ô∏è‚É£', '3': '3Ô∏è‚É£', '4': '4Ô∏è‚É£',
            '5': '5Ô∏è‚É£', '6': '6Ô∏è‚É£', '7': '7Ô∏è‚É£', '8': '8Ô∏è‚É£', '9': '9Ô∏è‚É£'
        }
        return ''.join(emoji_map[d] for d in str(n))

    async def generate_multiple_usernames(self, count, max_attempts=500):
        usernames = set()
        attempts = 0
        
        while len(usernames) < count and attempts < max_attempts:
            username = self.generate_username()
            if username and username not in usernames:
                if await self.check_username_availability(username):
                    usernames.add(username)
            attempts += 1
        
        return list(usernames)

    async def get_ai_balance(self):
        headers = {"Authorization": self.API_KEY}
        async with aiohttp.ClientSession() as session:
            async with session.get(self.API_BALANCE_URL, headers=headers, params={"useWalletBalance": "true"}) as response:
                response.raise_for_status()
                data = await response.json()
                return float(data.get("balance", 0))

    async def filter_with_ai(self, usernames):
        try:
            balance_before = await self.get_ai_balance()
            
            prompt = (
                "–û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤—è–∑–∫—É –∏–ª–∏ —Å–º—ã—Å–ª. "
                "–Æ–∑–µ—Ä–Ω–µ–π–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è. "
                "–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –º–∞—Å—Å–∏–≤–∞, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ.\n\n. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å 2 —é–∑–µ—Ä–Ω–µ–π–º–∞: @parliamentary_pyocyanase –∏ @mega_car, —Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –¢–û–õ–¨–ö–û @mega_car, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω –∏–º–µ–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤—è–∑–∫—É. –ü—Ä–∏ —ç—Ç–æ–º —Å–∞–º —é–∑–µ—Ä–Ω–µ–π–º @mega_car –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
                "–°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤:\n" + 
                "\n".join([f"@{u}" for u in usernames])
            )
            
            headers = {
                "Authorization": self.API_KEY,
                "Content-Type": "application/json"
            }
            data = {
                "model": self.MODEL,
                "messages": [{"role": "user", "content": prompt}],
                "useWalletBalance": True
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(self.API_CHAT_URL, json=data, headers=headers) as response:
                    response.raise_for_status()
                    result = await response.json()
                    ai_response = result["choices"][0]["message"]["content"]
            
            filtered = json.loads(ai_response)
            
            return [u.replace("@", "") for u in filtered], balance_before
        
        except Exception as e:
            
            return usernames, 0

    def format_usernames_list(self, usernames):
        return "\n".join(
            f"{self.number_to_emoji(i+1)} @{username}"
            for i, username in enumerate(usernames)
        )

    async def usernamecmd(self, message):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º"""
        if not NLTK_AVAILABLE:
            await utils.answer(message, self.strings["nltk_not_available"])
            return

        if not self.nltk_ready:
            await utils.answer(message, self.strings["downloading_words"])
            await self.init_nltk()
            if not self.nltk_ready:
                await utils.answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å NLT–ö")
                return

        msg = await utils.answer(message, self.strings["generating"])
        username = await self.find_available_username()
        
        if not username:
            await msg.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –ø–æ—Å–ª–µ 50 –ø–æ–ø—ã—Ç–æ–∫")
            return

        await msg.delete()
        
        await self.inline.form(
            message=message,
            text=self.strings["username_found"].format(username),
            reply_markup=[
                [{
                    "text": self.strings["take_username"],
                    "callback": self.take_username,
                    "args": (username,)
                }],
                [{
                    "text": self.strings["next_username"], 
                    "callback": self.generate_next_username,
                    "args": ()
                }],
                [{
                    "text": self.strings["show_all"],
                    "callback": self.show_all_handler,
                    "args": ()
                }]
            ],
            silent=True
        )

    async def take_username(self, call, username):
        try:
            from telethon.tl.functions.account import UpdateUsernameRequest
            await self.client(UpdateUsernameRequest(username=username))
            await call.edit(self.strings["username_set"].format(username))
        except Exception as e:
            await call.edit(self.strings["username_error"].format(str(e)))

    async def generate_next_username(self, call):
        await call.edit(self.strings["checking_availability"])
        username = await self.find_available_username()
        
        if not username:
            await call.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º")
            return

        await call.edit(
            self.strings["username_found"].format(username),
            reply_markup=[
                [{
                    "text": self.strings["take_username"],
                    "callback": self.take_username,
                    "args": (username,)
                }],
                [{
                    "text": self.strings["next_username"],
                    "callback": self.generate_next_username, 
                    "args": ()
                }],
                [{
                    "text": self.strings["show_all"],
                    "callback": self.show_all_handler,
                    "args": ()
                }]
            ]
        )

    async def show_all_handler(self, call):
        await call.edit(
            self.strings["choose_amount"],
            reply_markup=[
                [{
                    "text": "5 —é–∑–µ—Ä–Ω–µ–π–º–æ–≤",
                    "callback": self.generate_usernames_amount,
                    "args": (5,)
                }],
                [{
                    "text": "10 —é–∑–µ—Ä–Ω–µ–π–º–æ–≤",
                    "callback": self.generate_usernames_amount,
                    "args": (10,)
                }],
                [{
                    "text": "25 —é–∑–µ—Ä–Ω–µ–π–º–æ–≤",
                    "callback": self.generate_usernames_amount,
                    "args": (25,)
                }]
            ]
        )

    async def generate_usernames_amount(self, call, amount):
        await call.edit(self.strings["generating_usernames"].format(amount))
        usernames = await self.generate_multiple_usernames(amount)
        
        if not usernames:
            await call.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–∞")
            return
        try:
            balance = await self.get_ai_balance()
            balance_str = "{:.2f}‚ÇΩ".format(balance)
        except:
            balance = 0.0
            
        await call.edit(
            self.strings["ai_filter_prompt"].format(balance_str, self.MODEL),
            reply_markup=[
                [{
                    "text": self.strings["use_ai_yes"],
                    "callback": self.process_with_ai,
                    "args": (usernames, amount, True)
                }],
                [{
                    "text": self.strings["use_ai_no"],
                    "callback": self.process_with_ai,
                    "args": (usernames, amount, False)
                }]
            ]
        )
        
    def format_cost(self, cost):
        if cost < 0.01:
            return "–ø–æ—Ç—Ä–∞—á–µ–Ω–æ –º–µ–Ω—å—à–µ 0.01‚ÇΩ –ª–∏–±–æ –ò–ò –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª"
        return f"–ø–æ—Ç—Ä–∞—á–µ–Ω–æ {cost:.2f}‚ÇΩ"
    
    
    async def process_with_ai(self, call, usernames, amount, use_ai):
        ai_cost = 0.0
        footer = ""
        
        if use_ai:
            await call.edit(self.strings["filtering_ai"])
            try:
                
                filtered_usernames, balance_before = await self.filter_with_ai(usernames)
                balance_after = await self.get_ai_balance()
                ai_cost = balance_before - balance_after
                
                usernames = filtered_usernames
                footer = self.strings["ai_footer"].format(self.format_cost(ai_cost))
                
            except Exception as e:
                footer = "\n\n" + self.strings["ai_error"].format(str(e))
        
        count = len(usernames)
        if count < amount:
            text = self.strings["not_enough_usernames"].format(
                count, 
                amount,
                self.format_usernames_list(usernames)
            ) + footer
        else:
            text = self.strings["available_usernames"].format(
                count,
                self.format_usernames_list(usernames)
            ) + footer
        
        await call.edit(text)
