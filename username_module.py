# requires: google-genai google nltk
# meta developer: @Lucky_modules

import random
import json
import re
from .. import loader, utils
from google import genai

try:
    import nltk
    from nltk.corpus import words
    NLTK_AVAILABLE = True
except ImportError:
    NLTK_AVAILABLE = False


@loader.tds
class UsernameMod(loader.Module):
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Gemini"""
    strings = {
        "name": "Username",
        "generating": "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–≤–æ–±–æ–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º...",
        "username_found": "‚úÖ –ù–∞–π–¥–µ–Ω —é–∑–µ—Ä–Ω–µ–π–º: <b>@{}</b>\n\nüéØ –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        "username_set": "‚úÖ –Æ–∑–µ—Ä–Ω–µ–π–º <b>@{}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
        "username_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —é–∑–µ—Ä–Ω–µ–π–º–∞: {}",
        "take_username": "üì• –ó–∞–±—Ä–∞—Ç—å",
        "next_username": "‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π",
        "show_all": "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ",
        "choose_amount": "üìã –£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤:",
        "generating_usernames": "üîÑ –°–æ–∑–¥–∞—é {} —é–∑–µ—Ä–Ω–µ–π–º–æ–≤...",
        "available_usernames": "‚úÖ –°–≤–æ–±–æ–¥–Ω—ã–µ —é–∑–µ—Ä–Ω–µ–π–º—ã ({} —à—Ç):\n\n{}",
        "not_enough_usernames": "‚ùå –ù–∞—à–ª–æ—Å—å —Ç–æ–ª—å–∫–æ {} –∏–∑ {} —Å–≤–æ–±–æ–¥–Ω—ã—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤:\n\n{}",
        "ai_filter_prompt": "ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?\n\n–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º—ã –∏ –æ—Å—Ç–∞–≤–∏—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Ö–æ—Ç—å –∫–∞–∫—É—é —Ç–æ –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤—è–∑–∫—É –ª–∏–±–æ –ª–æ–≥–∏–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä @mega_car\n‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –º–æ–∂–µ—Ç —É–º–µ–Ω—å—à–∏—Ç—å—Å—è\n\n",
        "use_ai_yes": "‚úÖ –î–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å",
        "use_ai_no": "‚ùå –ù–µ—Ç, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å",
        "filtering_ai": "ü§ñ –§–∏–ª—å—Ç—Ä—É—é —é–∑–µ—Ä–Ω–µ–π–º—ã —Å –ø–æ–º–æ—â—å—é Gemini...",
        "ai_footer": "\n\nü§ñ –ú–æ–¥–µ–ª—å {}\n(–∏–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å: <code>.cfg Username model</code>",
        "ai_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ Gemini: {}\n–í—ã–≤–æ–∂—É —Å–ø–∏—Å–æ–∫ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.",
        "checking_availability": "üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º–∞...",
        "nltk_not_available": "‚ùå NLTK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π <code>.terminal pip install nltk</code>, –∞ –∑–∞—Ç–µ–º <code>.restart -f</code>",
        "downloading_words": "üì• –°–∫–∞—á–∏–≤–∞—é –±–∞–∑—É —Å–ª–æ–≤ NLTK...",
        "cfg_api_key_doc": "API-–∫–ª—é—á Gemini (https://aistudio.google.com/apikey?hl=ru)",
        "cfg_model_doc": "–ú–æ–¥–µ–ª—å Gemini (–Ω–∞–ø—Ä–∏–º–µ—Ä: gemini-2.5-flash, gemini-2.5-pro)"
    }

    def __init__(self):
        self.word_list = []
        self.nltk_ready = False
        self.config = loader.ModuleConfig(
            loader.ConfigValue("api_key", "", self.strings["cfg_api_key_doc"], validator=loader.validators.Hidden()),
            loader.ConfigValue("model", "gemini-2.5-flash", self.strings["cfg_model_doc"]),
        )

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        if NLTK_AVAILABLE:
            await self.init_nltk()

    async def init_nltk(self):
        try:
            try:
                words.words()
            except:
                nltk.download('words', quiet=True)
            self.word_list = [w.lower() for w in words.words() if w.isalpha() and len(w) > 2]
            self.nltk_ready = True
        except:
            self.nltk_ready = False

    def generate_username(self):
        if not self.nltk_ready or not self.word_list:
            return None
        return f"{random.choice(self.word_list)}_{random.choice(self.word_list)}"

    async def check_username_availability(self, username):
        try:
            await self.client.get_entity(username)
            return False
        except:
            return True

    async def find_available_username(self):
        for _ in range(50):
            username = self.generate_username()
            if username and await self.check_username_availability(username):
                return username
        return None

    def number_to_emoji(self, n):
        emoji_map = {'0': '0Ô∏è‚É£', '1': '1Ô∏è‚É£', '2': '2Ô∏è‚É£', '3': '3Ô∏è‚É£', '4': '4Ô∏è‚É£',
                     '5': '5Ô∏è‚É£', '6': '6Ô∏è‚É£', '7': '7Ô∏è‚É£', '8': '8Ô∏è‚É£', '9': '9Ô∏è‚É£'}
        return ''.join(emoji_map[d] for d in str(n))

    async def generate_multiple_usernames(self, count):
        usernames = set()
        attempts = 0
        while len(usernames) < count and attempts < 500:
            username = self.generate_username()
            if username and username not in usernames:
                if await self.check_username_availability(username):
                    usernames.add(username)
            attempts += 1
        return list(usernames)

    async def filter_with_gemini(self, usernames):
        api_key = self.config["api_key"]
        model_name = self.config["model"]
        if not api_key:
            raise ValueError("–£–∫–∞–∂–∏ API-–∫–ª—é—á Gemini <code>.cfg Username api_key</code>")

        prompt = (
                "–û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π —Å–ø–∏—Å–æ–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤, –æ—Å—Ç–∞–≤–∏–≤ —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤—è–∑–∫—É –∏–ª–∏ —Å–º—ã—Å–ª. "
                "–Æ–∑–µ—Ä–Ω–µ–π–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ—Å—Ç—ã–º–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è. "
                "–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –º–∞—Å—Å–∏–≤–∞, –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ.\n\n. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å 2 —é–∑–µ—Ä–Ω–µ–π–º–∞: @parliamentary_pyocyanase –∏ @mega_car, —Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –¢–û–õ–¨–ö–û @mega_car, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω –∏–º–µ–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤—è–∑–∫—É. –ü—Ä–∏ —ç—Ç–æ–º —Å–∞–º —é–∑–µ—Ä–Ω–µ–π–º @mega_car –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –¢—ã –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 1 —é–∑–µ—Ä–Ω–µ–π–º"
                "–°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤:\n" + 
                "\n".join([f"@{u}" for u in usernames])
            )

        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(
            model=model_name,
            contents=[{"role": "user", "parts": [{"text": prompt}]}],
        )
        
        if not response.text:
            return usernames

        text = response.text.strip()

        match = re.search(r"\[.*\]", text, re.S)
        if not match:
            return usernames  

        try:
            parsed = json.loads(match.group(0))
            return [u.replace("@", "") for u in parsed]
        except:
            return usernames

    def format_usernames_list(self, usernames):
        return "\n".join(f"{self.number_to_emoji(i+1)} @{u}" for i, u in enumerate(usernames))

    async def usernamecmd(self, message):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º"""
        if not NLTK_AVAILABLE:
            return await utils.answer(message, self.strings["nltk_not_available"])
        if not self.nltk_ready:
            await utils.answer(message, self.strings["downloading_words"])
            await self.init_nltk()
            if not self.nltk_ready:
                return await utils.answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å NLT–ö")
        msg = await utils.answer(message, self.strings["generating"])
        username = await self.find_available_username()
        if not username:
            return await msg.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º –ø–æ—Å–ª–µ 50 –ø–æ–ø—ã—Ç–æ–∫")
        await msg.delete()
        await self.inline.form(
            message=message,
            text=self.strings["username_found"].format(username),
            reply_markup=[
                [{"text": self.strings["take_username"], "callback": self.take_username, "args": (username,)}],
                [{"text": self.strings["next_username"], "callback": self.generate_next_username, "args": ()}],
                [{"text": self.strings["show_all"], "callback": self.show_all_handler, "args": ()}]
            ],
            silent=True
        )

    async def take_username(self, call, username):
        try:
            from telethon.tl.functions.account import UpdateUsernameRequest
            await self.client(UpdateUsernameRequest(username=username))
            await call.edit(self.strings["username_set"].format(username))
        except Exception as e:
            await call.edit(self.strings["username_error"].format(str(e)))

    async def generate_next_username(self, call):
        await call.edit(self.strings["checking_availability"])
        username = await self.find_available_username()
        if not username:
            return await call.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º")
        await call.edit(
            self.strings["username_found"].format(username),
            reply_markup=[
                [{"text": self.strings["take_username"], "callback": self.take_username, "args": (username,)}],
                [{"text": self.strings["next_username"], "callback": self.generate_next_username, "args": ()}],
                [{"text": self.strings["show_all"], "callback": self.show_all_handler, "args": ()}]
            ]
        )

    async def show_all_handler(self, call):
        await call.edit(
            self.strings["choose_amount"],
            reply_markup=[
                [{"text": "5 —é–∑–µ—Ä–Ω–µ–π–º–æ–≤", "callback": self.generate_usernames_amount, "args": (5,)}],
                [{"text": "10 —é–∑–µ—Ä–Ω–µ–π–º–æ–≤", "callback": self.generate_usernames_amount, "args": (10,)}],
                [{"text": "25 —é–∑–µ—Ä–Ω–µ–π–º–æ–≤", "callback": self.generate_usernames_amount, "args": (25,)}]
            ]
        )

    async def generate_usernames_amount(self, call, amount):
        await call.edit(self.strings["generating_usernames"].format(amount))
        usernames = await self.generate_multiple_usernames(amount)
        if not usernames:
            return await call.edit("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º–∞")
        await call.edit(
            self.strings["ai_filter_prompt"].format(self.config["model"]),
            reply_markup=[
                [{"text": self.strings["use_ai_yes"], "callback": self.process_with_ai, "args": (usernames, amount, True)}],
                [{"text": self.strings["use_ai_no"], "callback": self.process_with_ai, "args": (usernames, amount, False)}]
            ]
        )

    async def process_with_ai(self, call, usernames, amount, use_ai):
        footer = ""
        if use_ai:
            await call.edit(self.strings["filtering_ai"])
            try:
                usernames = await self.filter_with_gemini(usernames)
                footer = self.strings["ai_footer"].format(self.config["model"])
            except Exception as e:
                footer = "\n\n" + self.strings["ai_error"].format(str(e))
        count = len(usernames)
        if count < amount:
            text = self.strings["not_enough_usernames"].format(count, amount, self.format_usernames_list(usernames)) + footer
        else:
            text = self.strings["available_usernames"].format(count, self.format_usernames_list(usernames)) + footer
        await call.edit(text)
        
