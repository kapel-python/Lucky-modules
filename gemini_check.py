# requires: google-generativeai
# meta developer: @Lucky_modules
# requires: google-genai google

import base64
import time
from .. import loader, utils
from google import genai

@loader.tds
class GeminiCheckMod(loader.Module):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π —á–µ—Ä–µ–∑ Gemini"""
    strings = {
        "name": "GeminiCheck",
        "cfg_api_key_doc": "API-–∫–ª—é—á Gemini (https://aistudio.google.com/apikey?hl=ru)",
        "cfg_model_doc": "–ú–æ–¥–µ–ª—å Gemini (–Ω–∞–ø—Ä–∏–º–µ—Ä: gemini-2.5-flash, gemini-2.5-pro)"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue("api_key", "", self.strings["cfg_api_key_doc"], validator=loader.validators.Hidden()),
            loader.ConfigValue("model", "gemini-2.5-flash", self.strings["cfg_model_doc"]),
        )

    async def gemcheckcmd(self, message):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥—É–ª—å [–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ–∞–π–ª]"""
        reply = await message.get_reply_message()
        if not reply or not reply.file or not reply.file.name.endswith(".py"):
            return await message.edit("‚ö†Ô∏è –û—Ç–≤–µ—Ç—å –Ω–∞ .py —Ñ–∞–π–ª")

        api_key = self.config["api_key"]
        model_name = self.config["model"]
        if not api_key:
            return await message.edit("‚ö†Ô∏è –£–∫–∞–∂–∏ API-–∫–ª—é—á Gemini <code>.cfg Geminicheck api_key</code>")

        await message.edit("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª—è...")
        start_time = time.time()

        file_bytes = await reply.download_media(bytes)
        code_text = file_bytes.decode(errors="ignore")
        line_count = len(code_text.splitlines())

        prompt = (
            "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Python-–∫–æ–¥–∞ –¥–ª—è Telegram-—é–∑–µ—Ä–±–æ—Ç–æ–≤.\n"
            "–î–∞–π —Å–≤–µ—Ä—Ö–∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≥—Ä–æ–∑—ã: (1 –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞ –∏–ª–∏ '–Ω–µ—Ç'). –ö —ç—Ç–∏–º —É–≥—Ä–æ–∑–∞–º –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫—Ä–∞–∂–∞ –¥–∞–Ω–Ω—ã—Ö, —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞, –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É –∏ –¥—Ä—É–≥–æ–µ.\n"
            "üü† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: (1 –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞ –∏–ª–∏ '–Ω–µ—Ç')\n"
            "üîµ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: (1 –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ—Ä–∞–∑–∞, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–¥)\n"
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –ª–∏—à–Ω–∏–µ –¥–µ—Ç–∞–ª–∏.\n\n"
            f"–ö–æ–¥ –º–æ–¥—É–ª—è:\n```python\n{code_text}\n```"
        )

        try:
            client = genai.Client(api_key=api_key)
            response = client.models.generate_content(
                model=model_name,
                contents=[
                    {"role": "user", "parts": [{"text": prompt}]},
                    {"role": "user", "parts": [{"inline_data": {"mime_type": "text/x-python", "data": base64.b64encode(file_bytes).decode()}}]},
                ],
            )
            result = response.text.strip()
        except Exception as e:
            result = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Gemini:\n`{e}`"

        elapsed_time = round(time.time() - start_time, 2)
        result += f"\n\n‚è± –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {elapsed_time:.0f} —Å–µ–∫\nüìè –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: {line_count}\nüß† –ú–æ–¥–µ–ª—å: {model_name} (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π <code>.cfg Geminicheck model</code>"


        await message.edit(result if result else "‚ö†Ô∏è Gemini –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç–∞")
      
