# requires: google-generativeai
# meta developer: @Lucky_modules

import base64
import time
import json
import re
from .. import loader, utils
from google import genai

@loader.tds
class SmartTriggersMod(loader.Module):
    """–£–º–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å –ò–ò –∞–Ω–∞–ª–∏–∑–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    strings = {
        "name": "SmartTriggers",
        "cfg_api_key_doc": "API-–∫–ª—é—á Gemini (https://aistudio.google.com/apikey?hl=ru)",
        "cfg_model_doc": "–ú–æ–¥–µ–ª—å Gemini (–Ω–∞–ø—Ä–∏–º–µ—Ä: gemini-2.5-flash, gemini-2.5-pro)",
        "chat_enabled": "‚úÖ –¢—Ä–∏–≥–≥–µ—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã",
        "chat_disabled": "‚ùå –¢—Ä–∏–≥–≥–µ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã",
        "chat_status": "üîÑ {}",
        "need_reply": "‚ùå –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ —Å–ª–æ–≤–æ <b>–ø—Ä–∏–≤–µ—Ç</b> –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å <b>–ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞</b>, —Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ <code>–ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞</code> –∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π <code>trigadd –ø—Ä–∏–≤–µ—Ç</code>",
        "trigger_added": "‚úÖ –¢—Ä–∏–≥–≥–µ—Ä <code>{}</code> –¥–æ–±–∞–≤–ª–µ–Ω (ID: <code>{}</code>)",
        "trigger_exists": "‚ö†Ô∏è –¢—Ä–∏–≥–≥–µ—Ä <code>{}</code> —É–∂–µ –µ—Å—Ç—å",
        "trigger_deleted": "‚úÖ –¢—Ä–∏–≥–≥–µ—Ä —Å ID <code>{}</code> —É–¥–∞–ª—ë–Ω",
        "trigger_not_found": "‚ùå –¢—Ä–∏–≥–≥–µ—Ä —Å ID <code>{}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω",
        "mode_changed": "‚úÖ –†–µ–∂–∏–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {}",
        "trigger_list": "üìã –°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ ({}):\n\n{}\n\nüîí - –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º\nüîç - –ß–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∂–∏–º\nüîê - –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º\n\n‚ÑπÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ç—Ä–∏–≥–≥–µ—Ä–∞ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π <code>.trig</code> id (<i>id —ç—Ç–æ —Ü–∏—Ñ—Ä–∞ –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç—Ä–∏–≥–≥–µ—Ä–∞</i>)",
        "no_triggers": "‚ÑπÔ∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤",
        "mode_menu": "üîß –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤:\n\nüîí –°—Ç—Ä–æ–≥–∏–π - –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–æ—á–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Ñ—Ä–∞–∑—ã –∏–ª–∏ —Å–ª–æ–≤–∞\n\nüîç –ß–∞—Å—Ç–∏—á–Ω—ã–π - –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã –≤ —Ç–µ–∫—Å—Ç–µ\n\nüîê –ü—Ä–∏–≤–∞—Ç–Ω—ã–π - –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n‚ÑπÔ∏è –°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–æ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø–∏—à–∏ <code>trig</code> ID —Ç—Ä–∏–≥–≥–µ—Ä–∞",
        "strict_mode": "–°—Ç—Ä–æ–≥–∏–π",
        "partial_mode": "–ß–∞—Å—Ç–∏—á–Ω—ã–π",
        "private_mode": "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π",
        "strict_desc": "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–æ—á–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Ñ—Ä–∞–∑—ã",
        "partial_desc": "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ñ—Ä–∞–∑—ã –≤ —Ç–µ–∫—Å—Ç–µ",
        "private_desc": "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        "banned": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤",
        "unbanned": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–±—Ä–∞–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤",
        "already_banned": "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ",
        "not_banned": "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ",
        "ban_list": "üìã –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n{}",
        "empty_ban_list": "‚ÑπÔ∏è –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç",
        "trigger_info": "üìç –¢—Ä–∏–≥–≥–µ—Ä #{}\n\nüìù –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É: <code>{}</code>\n\nüí¨ –¢–µ–∫—Å—Ç –∫ —Ç—Ä–∏–≥–≥–µ—Ä—É: {}{}\nüìä –¢–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞: {}",
        "trigger_mode_changed": "‚úÖ –†–µ–∂–∏–º —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {}",
        "change_trigger_mode": "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Ç—Ä–∏–≥–≥–µ—Ä–∞",
        "delete_trigger": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä",
        "back_to_trigger": "‚Üû –ù–∞–∑–∞–¥",
        "invalid_trigger_id": "‚ùå –£–∫–∞–∂–∏ ID —Ç—Ä–∏–≥–≥–µ—Ä–∞",
        "confirm_delete": "‚ö†Ô∏è –¢—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä <code>{}</code>?\n\n–ü–æ—Ç–æ–º –Ω–µ –≤–µ—Ä–Ω–µ—à—å –æ–±—Ä–∞—Ç–Ω–æ",
        "confirm_delete_yes": "‚úÖ –ö–æ–Ω–µ—á–Ω–æ",
        "confirm_delete_no": "‚ùå –û—Ç–º–µ–Ω–∞",
        "spam_warning": "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏\n{}, –µ—Å–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—à—å —Å–ø–∞–º, —Ç—ã –±—É–¥–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤",
        "spam_banned": "üö´ {} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏",
        "ai_analyzing": "ü§ñ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞...",
        "ai_no_api_key": "‚ö†Ô∏è –£–∫–∞–∂–∏ API-–∫–ª—é—á Gemini <code>.cfg SmartTriggers api_key</code>",
        "ai_analysis_result": "ü§ñ –ò–ò –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:\n\n{}",
        "ai_no_suggestions": "ü§ñ –ò–ò –Ω–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π",
        "ai_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò:\n`{}`",
        "add_trigger_btn": "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä",
        "trigger_suggestion": "üî• <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞:</b>\n\nüìù –°–ª–æ–≤–æ/—Ñ—Ä–∞–∑–∞: <code>{}</code>\nüí¨ –û—Ç–≤–µ—Ç: <code>{}</code>\n\n‚ùì –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä?",
        "trigger_added_ai": "‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ò–ò!",
        "trigger_declined": "‚ùå –¢—Ä–∏–≥–≥–µ—Ä –æ—Ç–∫–ª–æ–Ω—ë–Ω",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue("api_key", "", self.strings["cfg_api_key_doc"], validator=loader.validators.Hidden()),
            loader.ConfigValue("model", "gemini-2.5-flash", self.strings["cfg_model_doc"]),
        )
        self.db = None
        self.triggers = {}
        self.modes = {}
        self.spam_tracker = {}

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        self.triggers = self.db.get("SmartTriggers", "triggers", {}) or {}
        self.modes = self.db.get("SmartTriggers", "modes", {}) or {}

    def check_spam(self, user_id, trigger_name):
        current_time = time.time()
        
        if user_id not in self.spam_tracker:
            self.spam_tracker[user_id] = {"triggers": [], "warned": False}
        
        user_data = self.spam_tracker[user_id]
        
        user_data["triggers"] = [
            (timestamp, trig_name) for timestamp, trig_name in user_data["triggers"] 
            if current_time - timestamp < 1.0
        ]
        
        user_data["triggers"].append((current_time, trigger_name))
        
        same_trigger_count = sum(1 for _, trig_name in user_data["triggers"] if trig_name == trigger_name)
        
        if same_trigger_count >= 3:
            if user_data["warned"]:
                return "ban"
            else:
                user_data["warned"] = True
                return "warn"
        
        return "continue"

    async def auto_ban_user(self, user_id):
        blacklist = self.db.get("SmartTriggers", "blacklist", []) or []
        if user_id not in blacklist:
            blacklist.append(user_id)
            self.db.set("SmartTriggers", "blacklist", blacklist)

    async def get_user_name(self, user_id):
        try:
            user = await self.client.get_entity(user_id)
            return user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        except:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
    async def _resolve_user_id(self, message):
        if message.is_reply:
            reply_msg = await message.get_reply_message()
            return reply_msg.sender_id
        args = utils.get_args_raw(message)
        if not args:
            return None
        if args.isdigit():
            return int(args)
        username = args.lstrip('@')
        try:
            entity = await self.client.get_entity(username)
            return entity.id
        except:
            return None

    async def trigaicmd(self, message):
        """ü§ñ –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ò–ò –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        api_key = self.config["api_key"]
        model_name = self.config["model"]
        
        if not api_key:
            await utils.answer(message, self.strings["ai_no_api_key"])
            return

        await utils.answer(message, self.strings["ai_analyzing"])
        start_time = time.time()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞
            messages = await self.client.get_messages(message.chat_id, limit=100)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            history_text = ""
            for msg in reversed(messages):
                if msg.text and len(msg.text.strip()) > 0:
                    sender_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    try:
                        if msg.sender:
                            sender = await self.client.get_entity(msg.sender_id)
                            sender_name = sender.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    except:
                        pass
                    
                    history_text += f"{sender_name}: {msg.text}\n"

            if not history_text.strip():
                await utils.answer(message, "‚ùå –í –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò
            prompt = (
                "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —á–∞—Ç–æ–≤ –≤ Telegram. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ 3-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤.\n"
                "–¢—Ä–∏–≥–≥–µ—Ä ‚Äî —ç—Ç–æ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
                "–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:\n"
                '{"—Å–ª–æ–≤–æ1": "–æ—Ç–≤–µ—Ç1", "—Å–ª–æ–≤–æ2": "–æ—Ç–≤–µ—Ç2", "—Å–ª–æ–≤–æ3": "–æ—Ç–≤–µ—Ç3"}\n\n'
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
                "- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑—ã\n"
                "- –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–µ, –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã\n"
                "- –û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å—Ç–∏–ª–µ —á–∞—Ç–∞\n"
                "- –ú–∞–∫—Å–∏–º—É–º 5 —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤\n"
                "- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è\n\n"
                f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:\n{history_text[:4000]}"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
            client = genai.Client(api_key=api_key)
            response = client.models.generate_content(
                model=model_name,
                contents=[{"role": "user", "parts": [{"text": prompt}]}],
            )
            
            result = response.text.strip()
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            try:
                # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
                json_start = result.find('{')
                json_end = result.rfind('}') + 1
                if json_start != -1 and json_end != 0:
                    json_str = result[json_start:json_end]
                    suggestions = json.loads(json_str)
                else:
                    suggestions = json.loads(result)
                
                if not suggestions:
                    await utils.answer(message, self.strings["ai_no_suggestions"])
                    return
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
                await self.show_ai_suggestions(message, suggestions)
                
            except json.JSONDecodeError as e:
                await utils.answer(message, f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò:\n`{e}`\n\n–û—Ç–≤–µ—Ç –ò–ò:\n{result}")
                
        except Exception as e:
            elapsed_time = round(time.time() - start_time, 2)
            await utils.answer(message, self.strings["ai_error"].format(str(e)))

    async def show_ai_suggestions(self, message, suggestions):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ò–ò —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏"""
        suggestion_text = ""
        buttons = []
        
        for i, (trigger, response) in enumerate(suggestions.items(), 1):
            suggestion_text += f"{i}. <code>{trigger}</code> ‚Üí <code>{response}</code>\n"
            buttons.append([{
                "text": f"‚ûï –î–æ–±–∞–≤–∏—Ç—å '{trigger}'",
                "callback": self.add_suggested_trigger,
                "args": (trigger, response, str(message.chat_id)),
            }])
        
        await self.inline.form(
            message=message,
            text=f"ü§ñ –ò–ò –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:\n\n{suggestion_text}\n\nüí° –í—ã–±–µ—Ä–∏ –∫–∞–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–æ–±–∞–≤–∏—Ç—å:",
            reply_markup=buttons,
            silent=True
        )

    async def add_suggested_trigger(self, call, trigger_name, response_text, chat_id):
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ò–ò —Ç—Ä–∏–≥–≥–µ—Ä"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
        temp_msg = await self.client.send_message(
            int(chat_id),
            response_text
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
        trigger_name = trigger_name.lower().strip()
        
        if chat_id not in self.triggers:
            self.triggers[chat_id] = {}
            
        if trigger_name in self.triggers[chat_id]:
            await call.answer("‚ö†Ô∏è –¢–∞–∫–æ–π —Ç—Ä–∏–≥–≥–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!", show_alert=True)
            return
        
        trigger_id = len(self.triggers[chat_id]) + 1
        data = {
            "id": trigger_id,
            "mode": self.modes.get(str(call.from_user.id), "partial"),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–∞—Å—Ç–∏—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –ò–ò —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
            "chat_id": temp_msg.chat_id,
            "message_id": temp_msg.id
        }
        
        self.triggers[chat_id][trigger_name] = data
        self.db.set("SmartTriggers", "triggers", self.triggers)
        
        await call.answer(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä '{trigger_name}' –¥–æ–±–∞–≤–ª–µ–Ω!", show_alert=False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        updated_text = call.message.text + f"\n\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: <code>{trigger_name}</code>"
        await call.edit(updated_text, reply_markup=call.message.reply_markup)

    async def trigchatcmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        chat_id = str(message.chat_id)
        chats = self.db.get("SmartTriggers", "chats", {}) or {}
        new_status = not chats.get(chat_id, False)
        chats[chat_id] = new_status
        self.db.set("SmartTriggers", "chats", chats)
        status_text = self.strings["chat_enabled"] if new_status else self.strings["chat_disabled"]
        await utils.answer(message, self.strings["chat_status"].format(status_text))

    async def trigaddcmd(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –æ—Ç–≤–µ—Ç–æ–º).–ù–∞–ø—Ä–∏–º–µ—Ä —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ —Å–ª–æ–≤–æ '–ø—Ä–∏–≤–µ—Ç' –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å '–ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞', —Ç–æ –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ '–ü—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞' –∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π trigadd –ø—Ä–∏–≤–µ—Ç"""
        if not message.is_reply:
            await utils.answer(message, self.strings["need_reply"])
            return
        chat_id = str(message.chat_id)
        trigger_name = utils.get_args_raw(message).lower().strip()
        reply_msg = await message.get_reply_message()
        
        if chat_id not in self.triggers:
            self.triggers[chat_id] = {}
        if trigger_name in self.triggers[chat_id]:
            await utils.answer(message, self.strings["trigger_exists"].format(trigger_name))
            return
        
        trigger_id = len(self.triggers[chat_id]) + 1
        data = {
            "id": trigger_id, 
            "mode": self.modes.get(str(message.sender_id), "strict"),
            "chat_id": reply_msg.chat_id,
            "message_id": reply_msg.id
        }
        
        self.triggers[chat_id][trigger_name] = data
        self.db.set("SmartTriggers", "triggers", self.triggers)
        await utils.answer(message, self.strings["trigger_added"].format(trigger_name, trigger_id))

    async def trigcmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∏–≥–≥–µ—Ä–µ –ø–æ ID.–ü—Ä–∏–º–µ—Ä: .trig 10"""
        args = utils.get_args_raw(message)
        if not args or not args.isdigit():
            await utils.answer(message, self.strings["invalid_trigger_id"])
            return
        
        trigger_id = int(args)
        chat_id = str(message.chat_id)
        
        if chat_id not in self.triggers or not self.triggers[chat_id]:
            await utils.answer(message, self.strings["no_triggers"])
            return
        
        trigger_data = None
        trigger_name = None
        for name, data in self.triggers[chat_id].items():
            if data["id"] == trigger_id:
                trigger_data = data
                trigger_name = name
                break
        
        if not trigger_data:
            await utils.answer(message, self.strings["trigger_not_found"].format(trigger_id))
            return
        
        try:
            msg = await self.client.get_messages(int(trigger_data["chat_id"]), ids=trigger_data["message_id"])
            text_content = msg.raw_text or "[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
            media_info = ""
            
            if msg.media:
                media_emoji = self.get_media_emoji(msg.media)
                media_type = self.get_media_type_name(msg.media)
                media_info = f"\nüìã –ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Ç–∏–ø –∫ —Ç—Ä–∏–≥–≥–µ—Ä—É: {media_type}\n\n"
        except:
            text_content = "[—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ]"
            media_info = ""
        
        mode_name = {
            "strict": self.strings["strict_mode"],
            "partial": self.strings["partial_mode"], 
            "private": self.strings["private_mode"]
        }.get(trigger_data["mode"], trigger_data["mode"])
        
        info_text = self.strings["trigger_info"].format(
            trigger_id,
            trigger_name,
            text_content,
            media_info,
            mode_name
        )
        
        await self.inline.form(
            message=message,
            text=info_text,
            reply_markup=[
                [{
                    "text": self.strings["change_trigger_mode"],
                    "callback": self.show_trigger_mode_menu,
                    "args": (chat_id, trigger_name, trigger_id),
                }],
                [{
                    "text": self.strings["delete_trigger"],
                    "callback": self.confirm_trigger_delete,
                    "args": (chat_id, trigger_name, trigger_id),
                }]
            ],
            silent=True
        )

    async def confirm_trigger_delete(self, call, chat_id, trigger_name, trigger_id):
        confirm_text = self.strings["confirm_delete"].format(trigger_id, trigger_name)
        
        await call.edit(
            confirm_text,
            reply_markup=[
                [{
                    "text": self.strings["confirm_delete_yes"],
                    "callback": self.delete_trigger_confirmed,
                    "args": (chat_id, trigger_name, trigger_id),
                }],
                [{
                    "text": self.strings["confirm_delete_no"],
                    "callback": self.back_to_trigger_info,
                    "args": (chat_id, trigger_name, trigger_id),
                }]
            ]
        )

    async def delete_trigger_confirmed(self, call, chat_id, trigger_name, trigger_id):
        if chat_id in self.triggers and trigger_name in self.triggers[chat_id]:
            del self.triggers[chat_id][trigger_name]
            for idx, (_, data) in enumerate(self.triggers[chat_id].items(), 1):
                data["id"] = idx
                
            self.db.set("SmartTriggers", "triggers", self.triggers)
            
            await call.edit(
                self.strings["trigger_deleted"].format(trigger_id),
                reply_markup=[]
            )
        else:
            await call.edit(
                self.strings["trigger_not_found"].format(trigger_id),
                reply_markup=[]
            )

    async def show_trigger_mode_menu(self, call, chat_id, trigger_name, trigger_id):
        current_mode = self.triggers[chat_id][trigger_name]["mode"]

        def btn_text(mode_key):
            check = "‚úÖ " if mode_key == current_mode else ""
            return f"{check}{self.strings[mode_key + '_mode']}"

        await call.edit(
            self.strings["mode_menu"],
            reply_markup=[
                [{
                    "text": btn_text("strict"),
                    "callback": self.set_trigger_mode,
                    "args": (chat_id, trigger_name, trigger_id, "strict"),
                }],
                [{
                    "text": btn_text("partial"),
                    "callback": self.set_trigger_mode,
                    "args": (chat_id, trigger_name, trigger_id, "partial"),
                }],
                [{
                    "text": btn_text("private"),
                    "callback": self.set_trigger_mode,
                    "args": (chat_id, trigger_name, trigger_id, "private"),
                }],
                [{
                    "text": self.strings["back_to_trigger"],
                    "callback": self.back_to_trigger_info,
                    "args": (chat_id, trigger_name, trigger_id),
                }]
            ]
        )

    async def set_trigger_mode(self, call, chat_id, trigger_name, trigger_id, new_mode):
        self.triggers[chat_id][trigger_name]["mode"] = new_mode
        self.db.set("SmartTriggers", "triggers", self.triggers)
        
        mode_name = {
            "strict": self.strings["strict_mode"],
            "partial": self.strings["partial_mode"], 
            "private": self.strings["private_mode"]
        }.get(new_mode, new_mode)
        
        await call.answer(self.strings["trigger_mode_changed"].format(mode_name), show_alert=False)
        await self.back_to_trigger_info(call, chat_id, trigger_name, trigger_id)

    async def back_to_trigger_info(self, call, chat_id, trigger_name, trigger_id):
        trigger_data = self.triggers[chat_id][trigger_name]
        
        try:
            msg = await self.client.get_messages(int(trigger_data["chat_id"]), ids=trigger_data["message_id"])
            text_content = msg.raw_text or "[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
            media_info = ""
            
            if msg.media:
                media_type = self.get_media_type_name(msg.media)
                media_info = f"\nüìã –ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Ç–∏–ø –∫ —Ç—Ä–∏–≥–≥–µ—Ä—É: {media_type}\n\n"
        except:
            text_content = "[—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ]"
            media_info = ""
        
        mode_name = {
            "strict": self.strings["strict_mode"],
            "partial": self.strings["partial_mode"], 
            "private": self.strings["private_mode"]
        }.get(trigger_data["mode"], trigger_data["mode"])
        
        info_text = self.strings["trigger_info"].format(
            trigger_id,
            trigger_name,
            text_content,
            media_info,
            mode_name
        )
        
        await call.edit(
            info_text,
            reply_markup=[
                [{
                    "text": self.strings["change_trigger_mode"],
                    "callback": self.show_trigger_mode_menu,
                    "args": (chat_id, trigger_name, trigger_id),
                }],
                [{
                    "text": self.strings["delete_trigger"],
                    "callback": self.confirm_trigger_delete,
                    "args": (chat_id, trigger_name, trigger_id),
                }]
            ]
        )

    async def trigmodecmd(self, message):
        """–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        user_id = str(message.sender_id)
        current_mode = self.modes.get(user_id, "strict")

        def btn_text(mode_key):
            check = "‚úÖ " if mode_key == current_mode else ""
            return f"{check}{self.strings[mode_key + '_mode']}"

        await self.inline.form(
            message=message,
            text=self.strings["mode_menu"],
            reply_markup=[
                [{
                    "text": btn_text("strict"),
                    "callback": self.set_mode,
                    "args": ("strict",),
                    "description": self.strings["strict_desc"]
                }],
                [{
                    "text": btn_text("partial"),
                    "callback": self.set_mode,
                    "args": ("partial",),
                    "description": self.strings["partial_desc"]
                }],
                [{
                    "text": btn_text("private"),
                    "callback": self.set_mode,
                    "args": ("private",),
                    "description": self.strings["private_desc"]
                }]
            ],
            silent=True
        )

    async def set_mode(self, call, mode):
        user_id = str(call.from_user.id)
        self.modes[user_id] = mode
        self.db.set("SmartTriggers", "modes", self.modes)

        def btn_text(mode_key):
            check = "‚úÖ " if mode_key == mode else ""
            return f"{check}{self.strings[mode_key + '_mode']}"

        await call.edit(
            self.strings["mode_menu"],
            reply_markup=[
                [{
                    "text": btn_text("strict"),
                    "callback": self.set_mode,
                    "args": ("strict",),
                    "description": self.strings["strict_desc"]
                }],
                [{
                    "text": btn_text("partial"),
                    "callback": self.set_mode,
                    "args": ("partial",),
                    "description": self.strings["partial_desc"]
                }],
                [{
                    "text": btn_text("private"),
                    "callback": self.set_mode,
                    "args": ("private",),
                    "description": self.strings["private_desc"]
                }]
            ]
        )
        mode_name = {
            "strict": self.strings["strict_mode"],
            "partial": self.strings["partial_mode"], 
            "private": self.strings["private_mode"]
        }.get(mode, mode)
        
        await call.answer(self.strings["mode_changed"].format(mode_name), show_alert=False)

    async def trigdelcmd(self, message):
        """–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ ID"""
        args = utils.get_args_raw(message)
        if not args or not args.isdigit():
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏ ID —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (ID –Ω–∞—Ö–æ–¥—Ç–∏—Ç—Å—è –≤ triglist)")
            return
        trigger_id = int(args)
        chat_id = str(message.chat_id)
        if chat_id not in self.triggers or not self.triggers[chat_id]:
            await utils.answer(message, self.strings["no_triggers"])
            return
        deleted = False
        for trigger_name, data in list(self.triggers[chat_id].items()):
            if data["id"] == trigger_id:
                del self.triggers[chat_id][trigger_name]
                deleted = True
                break
        if deleted:
            for idx, (_, data) in enumerate(self.triggers[chat_id].items(), 1):
                data["id"] = idx
            self.db.set("SmartTriggers", "triggers", self.triggers)
            await utils.answer(message, self.strings["trigger_deleted"].format(trigger_id))
        else:
            await utils.answer(message, self.strings["trigger_not_found"].format(trigger_id))

    def get_media_emoji(self, media):
        if not media:
            return ""
        
        if hasattr(media, 'photo'):
            return "[üì∑]"
        elif hasattr(media, 'document'):
            if hasattr(media.document, 'mime_type'):
                mime = media.document.mime_type
                if mime == 'application/x-tgsticker':
                    return "[üé™]"
                elif mime.startswith('video/'):
                    return "[üé¨]"
                elif mime.startswith('audio/'):
                    return "[üéµ]"
                elif mime.startswith('image/'):
                    return "[üñºÔ∏è]"
                else:
                    return "[üìã]"
            if hasattr(media.document, 'attributes'):
                for attr in media.document.attributes:
                    attr_type = type(attr).__name__
                    if 'DocumentAttributeSticker' in attr_type:
                        return "[üé™]"
                    elif 'DocumentAttributeVideo' in attr_type:
                        if hasattr(attr, 'round_message') and attr.round_message:
                            return "[‚≠ï]" 
                        else:
                            return "[üé¨]"
                    elif 'DocumentAttributeAudio' in attr_type:
                        if hasattr(attr, 'voice') and attr.voice:
                            return "[üéô]"
                        else:
                            return "[üéµ]" 
            return "[üìã]"
        else:
            return "[üìã]"

    def get_media_type_name(self, media):
        if not media:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
        
        if hasattr(media, 'photo'):
            return "–§–æ—Ç–æ"
        elif hasattr(media, 'document'):
            if hasattr(media.document, 'mime_type'):
                mime = media.document.mime_type
                if mime == 'application/x-tgsticker':
                    return "–°—Ç–∏–∫–µ—Ä"
                elif mime.startswith('video/'):
                    return "–í–∏–¥–µ–æ—Ñ–∞–π–ª"
                elif mime.startswith('audio/'):
                    return "–ê—É–¥–∏–æ—Ñ–∞–π–ª"
                elif mime.startswith('image/'):
                    return "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                elif mime.startswith('text/'):
                    return "–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"
                else:
                    return "–î–æ–∫—É–º–µ–Ω—Ç"
            if hasattr(media.document, 'attributes'):
                for attr in media.document.attributes:
                    attr_type = type(attr).__name__
                    if 'DocumentAttributeSticker' in attr_type:
                        return "–°—Ç–∏–∫–µ—Ä"
                    elif 'DocumentAttributeVideo' in attr_type:
                        if hasattr(attr, 'round_message') and attr.round_message:
                            return "–í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                        else:
                            return "–í–∏–¥–µ–æ"
                    elif 'DocumentAttributeAudio' in attr_type:
                        if hasattr(attr, 'voice') and attr.voice:
                            return "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                        else:
                            return "–ê—É–¥–∏–æ"
            return "–î–æ–∫—É–º–µ–Ω—Ç"
        else:
            return "–ú–µ–¥–∏–∞—Ñ–∞–π–ª"

    async def triglistcmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤"""
        chat_id = str(message.chat_id)
        if chat_id not in self.triggers or not self.triggers[chat_id]:
            await utils.answer(message, self.strings["no_triggers"])
            return
        triggers = self.triggers[chat_id]
        count = len(triggers)
        trigger_list = []
        for trigger_name, data in triggers.items():
            mode_emoji = {
                "strict": "üîí",
                "partial": "üîç", 
                "private": "üîê"
            }.get(data["mode"], "üîí")
            
            preview = ""
            try:
                msg = await self.client.get_messages(int(data["chat_id"]), ids=data["message_id"])
                if msg.media:
                    preview += self.get_media_emoji(msg.media)
                    if msg.raw_text:
                        text_preview = msg.raw_text[:30]
                        if len(msg.raw_text) > 30:
                            text_preview += "..."
                        preview += f" {text_preview}"
                else:
                    if msg.raw_text:
                        text_preview = msg.raw_text[:30]
                        if len(msg.raw_text) > 30:
                            text_preview += "..."
                        preview = text_preview
            except:
                preview = "[—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ]"
            
            trigger_list.append(
                f"<code>{data['id']}</code>. {mode_emoji} <code>{trigger_name}</code> ‚Üí {preview}"
            )
        await utils.answer(message, self.strings["trigger_list"].format(count, "\n".join(trigger_list)))

    async def trigbancmd(self, message):
        """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID / @username / —Ä–µ–ø–ª–∞–π)"""
        user_id = await self._resolve_user_id(message)
        if not user_id:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏ ID/—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        blacklist = self.db.get("SmartTriggers", "blacklist", []) or []
        if user_id in blacklist:
            await utils.answer(message, self.strings["already_banned"])
            return
        blacklist.append(user_id)
        self.db.set("SmartTriggers", "blacklist", blacklist)
        await utils.answer(message, self.strings["banned"])

    async def trigunbancmd(self, message):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID / @username / —Ä–µ–ø–ª–∞–π)"""
        user_id = await self._resolve_user_id(message)
        if not user_id:
            await utils.answer(message, "‚ùå –£–∫–∞–∂–∏ ID/—é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        blacklist = self.db.get("SmartTriggers", "blacklist", []) or []
        if user_id not in blacklist:
            await utils.answer(message, self.strings["not_banned"])
            return
        blacklist.remove(user_id)
        self.db.set("SmartTriggers", "blacklist", blacklist)
        await utils.answer(message, self.strings["unbanned"])

    async def trigbanlistcmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        blacklist = self.db.get("SmartTriggers", "blacklist", []) or []
        if not blacklist:
            await utils.answer(message, self.strings["empty_ban_list"])
            return
        
        ban_list = []
        for user_id in blacklist:
            try:
                user = await self.client.get_entity(user_id)
                name = user.first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
                
                if hasattr(user, 'username') and user.username:
                    user_link = f'<a href="https://t.me/{user.username}">{name}</a>'
                else:
                    user_link = f'<a href="tg://user?id={user_id}">{name}</a>'
                
                ban_list.append(f"{user_link}")
            except:
                user_link = f'<a href="tg://user?id={user_id}">–£–¥–∞–ª—ë–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç</a>'
                ban_list.append(f"{user_link} (ID <code>{user_id}</code>)")
        
        await utils.answer(message, self.strings["ban_list"].format("\n".join(ban_list)))

    async def watcher(self, message):
        if not message.text:
            return
        chat_id = str(message.chat_id)
        chats = self.db.get("SmartTriggers", "chats", {}) or {}
        if not chats.get(chat_id, False):
            return
        if chat_id not in self.triggers or not self.triggers[chat_id]:
            return
        blacklist = self.db.get("SmartTriggers", "blacklist", []) or []
        if message.sender_id in blacklist:
            return
        
        text = message.text.lower()
        for trigger_name, data in self.triggers[chat_id].items():
            match = False
            
            if data["mode"] == "private":
                if not message.out:
                    continue
                    
                if text.strip() == trigger_name.strip():
                    match = True
            elif data["mode"] == "strict":
                if text.strip() == trigger_name.strip():
                    match = True
            else:
                if trigger_name in text:
                    match = True
                    
            if match:
                spam_check = self.check_spam(message.sender_id, trigger_name)
                
                if spam_check == "warn":
                    user_name = await self.get_user_name(message.sender_id)
                    warning_text = self.strings["spam_warning"].format(user_name)
                    await self.client.send_message(
                        message.chat_id,
                        warning_text,
                        reply_to=message.id
                    )
                    return
                elif spam_check == "ban":
                    await self.auto_ban_user(message.sender_id)
                    user_name = await self.get_user_name(message.sender_id)
                    ban_text = self.strings["spam_banned"].format(user_name)
                    await self.client.send_message(
                        message.chat_id,
                        ban_text,
                        reply_to=message.id
                    )
                    return
                
                try:
                    original_msg = await self.client.get_messages(int(data["chat_id"]), ids=data["message_id"])
                    if original_msg.media and hasattr(original_msg.media, "document") or hasattr(original_msg.media, "photo"):
                        await self.client.send_message(
                            message.chat_id,
                            original_msg.message or "",
                            reply_to=message.id,
                            file=original_msg.media
                        )
                    else:
                        await self.client.send_message(
                            message.chat_id,
                            original_msg.message or "",
                            reply_to=message.id
                        )
                    
                except Exception as e:
                    error_info = f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ '{trigger_name}':\n"
                    error_info += f"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π chat_id: {data.get('chat_id', '–ù–ï –ù–ê–ô–î–ï–ù')}\n"
                    error_info += f"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π message_id: {data.get('message_id', '–ù–ï –ù–ê–ô–î–ï–ù')}\n"
                    error_info += f"–û—à–∏–±–∫–∞: {str(e)}"
                    await self.client.send_message(
                        message.chat_id,
                        error_info,
                        reply_to=message.id
                    )