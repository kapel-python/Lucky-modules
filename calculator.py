# meta developer: @Lucky_modules
import asyncio
import math
import re
from multiprocessing import Process, Queue
from .. import loader, utils
from telethon.tl.types import Message

@loader.tds
class CalcMod(loader.Module):
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é üßÆ"""

    strings = {"name": "Calculator"}

    def __init__(self):
        self.settings = {
            "max_time": 5.0,          
            "round_digits": 10,        
            "show_formula": True,      
            "percent_handling": True, 
            "error_detail": "brief"    
        }

    async def client_ready(self, client, db):
        self.db = db
        saved_settings = self.db.get("calc", "settings", {})
        self.settings.update(saved_settings)
        self.db.set("calc", "settings", self.settings)

    async def calccmd(self, message):
        """–í—ã—á–∏—Å–ª–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ. –§–æ—Ä–º–∞—Ç: .calc <–≤—ã—Ä–∞–∂–µ–Ω–∏–µ>"""
        expr = utils.get_args_raw(message)
        if not expr:
            await utils.answer(message, "üî¥ –û—à–∏–±–∫–∞: –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
            return

        
        original_expr = expr

        
        expr = (
            expr.replace("^", "**")
            .replace("œÄ", "pi")
            .replace("√ó", "*")
            .replace("√∑", "/")
            .replace(",", ".")
        )

        expr = re.sub(r"‚àö\s*(\d+\.?\d*)", r"sqrt(\1)", expr, flags=re.IGNORECASE)
        expr = re.sub(r"‚àö\s*\((.+?)\)", r"sqrt(\1)", expr, flags=re.IGNORECASE)
        
        if self.settings["percent_handling"]:
            expr = self._parse_percents(expr)

        
        allowed_names = {
            "pi": math.pi,
            "e": math.e,
            "sqrt": math.sqrt,
            "sin": math.sin,
            "cos": math.cos,
            "tan": math.tan,
            "log": math.log,
            "log10": math.log10,
            "radians": math.radians,
            "degrees": math.degrees,
            "sum": sum,
            "range": range,
            "abs": abs,
            "round": round,
            "factorial": math.factorial
        }

        queue = Queue()
        process = Process(target=self._eval_worker, args=(expr, queue, allowed_names))
        process.start()
        process.join(timeout=self.settings["max_time"])

        if process.is_alive():
            process.terminate()
            buttons = [
                [{"text": "‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "callback": self.calc_time_callback}],
                [{"text": "üìä –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "callback": self.calcsettings_callback}]
            ]
            await self.inline.form(
                message=message,
                text=f"‚è≥ –í—ã—Ä–∞–∂–µ–Ω–∏–µ {original_expr} –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å –¥–æ–ª—å—à–µ {self.settings['max_time']} —Å–µ–∫!",
                reply_markup=buttons,
                ttl=10 * 60
            )
            return

        result = queue.get()
        if isinstance(result, Exception):
            if self.settings["error_detail"] == "full":
                error_text = (
                    f"üî¥ –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:\n"
                    f"–¢–∏–ø: {type(result).__name__}\n"
                    f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(result)}\n"
                    f"–í—ã—Ä–∞–∂–µ–Ω–∏–µ: <code>{original_expr}</code>"
                )
            else:
                error_text = f"üî¥ –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {str(result)}"
            
            await utils.answer(message, error_text)
            return

        
        if isinstance(result, float):
            result = round(result, self.settings["round_digits"])
            if result.is_integer():
                result = int(result)

        if self.settings["show_formula"]:
            response = (
                f"üßÆ –í—ã—Ä–∞–∂–µ–Ω–∏–µ: <code>{original_expr}</code>\n"
                f"‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç: <code>{result}</code>"
            )
        else:
            response = f"‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç: <code>{result}</code>"

        await utils.answer(message, response)

    async def calcsetcmd(self, message):
        """–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
        await self.calcsettings_callback(message)

    async def calcsettings_callback(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        text = (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞</b>\n\n"
            f"‚Ä¢ ‚è≥ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{self.settings['max_time']}</code> —Å–µ–∫\n"
            f"‚Ä¢ üî¢ –¢–æ—á–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è: <code>{self.settings['round_digits']}</code> –∑–Ω–∞–∫–æ–≤\n"
            f"‚Ä¢ üìù –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {'‚úÖ' if self.settings['show_formula'] else '‚ùå'}\n"
            f"‚Ä¢ üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: {'‚úÖ' if self.settings['percent_handling'] else '‚ùå'}\n"
            f"‚Ä¢ üö® –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫: {'–ü–æ–¥—Ä–æ–±–Ω–∞—è' if self.settings['error_detail'] == 'full' else '–ö—Ä–∞—Ç–∫–∞—è'}"
        )

        buttons = [
            [{"text": "‚è≥ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", "callback": self.calc_time_callback}],
            [{"text": "üî¢ –¢–æ—á–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è", "callback": self.calc_round_callback}],
            [{"text": f"üìù –ü–æ–∫–∞–∑ –≤—ã—Ä–∞–∂–µ–Ω–∏—è {'‚úÖ' if self.settings['show_formula'] else '‚ùå'}", 
              "callback": self.toggle_formula_callback}],
            [{"text": f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç—ã: {'‚úÖ' if self.settings['percent_handling'] else '‚ùå'}", 
              "callback": self.toggle_percent_callback}],
            [{"text": f"üö® –û—à–∏–±–∫–∏: {'–ü–æ–¥—Ä–æ–±–Ω—ã–µ' if self.settings['error_detail'] == 'full' else '–ö—Ä–∞—Ç–∫–∏–µ'}", 
              "callback": self.toggle_error_detail_callback}]
        ]

        
        if isinstance(event, Message):
            await self.inline.form(
                message=event,
                text=text,
                reply_markup=buttons,
                ttl=10 * 60
            )
        else:
            await event.edit(
                text=text,
                reply_markup=buttons
            )

    async def calc_time_callback(self, call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        text = (
            "‚è≥ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n"
            "‚ÑπÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{self.settings['max_time']}</code> —Å–µ–∫\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
        )

        buttons = [
            [{"text": "‚ö°Ô∏è 1 —Å–µ–∫", "callback": self.set_time_callback, "args": (1.0,)}],
            [{"text": "üöÄ 3 —Å–µ–∫", "callback": self.set_time_callback, "args": (3.0,)}],
            [{"text": "üê¢ 5 —Å–µ–∫", "callback": self.set_time_callback, "args": (5.0,)}],
            [{"text": "üêå 10 —Å–µ–∫", "callback": self.set_time_callback, "args": (10.0,)}],
            [{"text": "üîô –ù–∞–∑–∞–¥", "callback": self.calcsettings_callback}]
        ]

        await call.edit(
            text=text,
            reply_markup=buttons
        )

    async def calc_round_callback(self, call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è"""
        text = (
            "üî¢ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è</b>\n\n"
            "‚ÑπÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <code>{self.settings['round_digits']}</code> –∑–Ω–∞–∫–æ–≤\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
        )

        buttons = [
            [{"text": "0 –∑–Ω–∞–∫–æ–≤", "callback": self.set_round_callback, "args": (0,)}],
            [{"text": "2 –∑–Ω–∞–∫–∞", "callback": self.set_round_callback, "args": (2,)}],
            [{"text": "4 –∑–Ω–∞–∫–∞", "callback": self.set_round_callback, "args": (4,)}],
            [{"text": "6 –∑–Ω–∞–∫–æ–≤", "callback": self.set_round_callback, "args": (6,)}],
            [{"text": "10 –∑–Ω–∞–∫–æ–≤", "callback": self.set_round_callback, "args": (10,)}],
            [{"text": "üîô –ù–∞–∑–∞–¥", "callback": self.calcsettings_callback}]
        ]

        await call.edit(
            text=text,
            reply_markup=buttons
        )

    async def set_time_callback(self, call, new_time):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.settings["max_time"] = new_time
        self.db.set("calc", "settings", self.settings)
        await call.answer(f"‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {new_time} —Å–µ–∫", show_alert=True)
        await self.calcsettings_callback(call)

    async def set_round_callback(self, call, new_round):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è"""
        self.settings["round_digits"] = new_round
        self.db.set("calc", "settings", self.settings)
        await call.answer(f"‚úÖ –¢–æ—á–Ω–æ—Å—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {new_round} –∑–Ω–∞–∫–æ–≤", show_alert=True)
        await self.calcsettings_callback(call)

    async def toggle_formula_callback(self, call):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—É–ª—ã"""
        self.settings["show_formula"] = not self.settings["show_formula"]
        self.db.set("calc", "settings", self.settings)
        status = "–≤–∫–ª—é—á–µ–Ω" if self.settings["show_formula"] else "–≤—ã–∫–ª—é—á–µ–Ω"
        await self.calcsettings_callback(call)

    async def toggle_percent_callback(self, call):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
        self.settings["percent_handling"] = not self.settings["percent_handling"]
        self.db.set("calc", "settings", self.settings)
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if self.settings["percent_handling"] else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        await self.calcsettings_callback(call)

    async def toggle_error_detail_callback(self, call):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫"""
        self.settings["error_detail"] = "full" if self.settings["error_detail"] == "brief" else "brief"
        self.db.set("calc", "settings", self.settings)
        status = "–ø–æ–¥—Ä–æ–±–Ω—ã–µ" if self.settings["error_detail"] == "full" else "–∫—Ä–∞—Ç–∫–∏–µ"
        await self.calcsettings_callback(call)

    def _parse_percents(self, expr: str) -> str:
        """–£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: X + Y%
        expr = re.sub(
            r'(\d+\.?\d*)\s*([\+\-])\s*(\d+\.?\d*)\s*%', 
            lambda m: f"{m.group(1)} {m.group(2)} ({m.group(1)} * {m.group(3)} / 100)", 
            expr
        )
        
        
        expr = re.sub(
            r'(\d+\.?\d*)\s*([\*\/])\s*(\d+\.?\d*)\s*%', 
            lambda m: f"{m.group(1)} {m.group(2)} ({m.group(3)} / 100)", 
            expr
        )
        
        expr = re.sub(
            r'(\d+\.?\d*)\s*%', 
            r'(\1 / 100)', 
            expr
        )
        
        return expr

    def _eval_worker(self, expr: str, queue: Queue, allowed_names: dict):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        try:
            result = eval(
                expr,
                {"__builtins__": {}},
                allowed_names
            )
            queue.put(result)
        except Exception as e:
            queue.put(e)
